#+Title: Owliver's Emacs Config!
#+Author: Pedro Oliveira (Owliver)
#+Property: header-args:emacs-lisp :tangle ~/.config/emacs/init.el

* Settings
** Set up some essential variables
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil) 
  (setq-default tab-width 2)
  (setq-default cursor-type 'bar) 
  (setq inhibit-startup-message t
        history-length 25
        use-dialog-box nil
        make-backup-files nil
        auto-save-default nil)
#+END_SRC
** Erase default minor modes.
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC
** Set up minor modes.
#+BEGIN_SRC emacs-lisp
  (global-display-line-numbers-mode 1)
  (recentf-mode 1)
  (savehist-mode 1)
  (save-place-mode 1)
  (global-auto-revert-mode 1)
  (electric-pair-mode 1)
  (global-visual-line-mode 1)
#+END_SRC
** Starts fullscreen
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . fullboth))
#+END_SRC
** Writing
#+BEGIN_SRC emacs-lisp
  (setq ispell-program-name "aspell")
#+END_SRC
* Packages
** MELPA Installation and Config.
#+BEGIN_SRC emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
  												 ("org"   . "https://orgmode.org/elpa/")
  												 ("gnu"   . "https://elpa.gnu.org/packages/")))

  (package-initialize)

  (unless (package-installed-p 'use-package)
  	(package-refresh-contents)
  	(package-install 'use-package))

  (require 'use-package)

  (setq use-package-always-ensure t)
#+END_SRC
** LSP mode enabled!
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure t
    :hook ((python-mode . lsp)
           (c-mode . lsp)
           (c++-mode . lsp)
           (js2-mode . lsp)
           (html-mode . lsp)
           (css-mode . lsp))
    :commands lsp
    :config
    (setq lsp-enable-snippet t)
    (setq lsp-prefer-flymake nil))
#+END_SRC

** LSP UI
#+BEGIN_SRC emacs-lisp
  (use-package lsp-ui
    :ensure t
    :after lsp-mode
    :config
    (setq lsp-ui-doc-enable t)     
    (setq lsp-ui-sideline-enable t)
    (setq lsp-ui-peek-enable t)    
    (setq lsp-ui-imenu-enable t)   
    (setq lsp-ui-flycheck-enable t))
#+END_SRC

** Give me some company
#+BEGIN_SRC emacs-lisp
  (use-package company
  :ensure t
  :config
  (global-company-mode 1)      
  (setq company-minimum-prefix-length 2))
#+END_SRC

** Magit is Magic
#+BEGIN_SRC emacs-lisp
  (use-package magit
  :ensure t)
#+END_SRC
** Snip snip snip...
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet)
  (yas-global-mode 1)
  
#+END_SRC
** Mood Line
#+BEGIN_SRC emacs-lisp
  (use-package mood-line
    :ensure t
    :config
    (mood-line-mode))
#+END_SRC
** Org Superstar Installation
#+BEGIN_SRC emacs-lisp
  (use-package org-superstar
    :ensure t
    :hook (org-mode . org-superstar-mode)
    :config
    (setq org-superstar-headline-bullets-list '(">"
"◉" "○" "▶" "◆" "◉" "○" "▶" "◆")))
#+END_SRC
** Org Roam
#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :ensure t)
  (use-package org-roam-ui
    :ensure t)
#+END_SRC
** LaTeX
#+BEGIN_SRC emacs-lisp
  (use-package auctex
    :ensure t)
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t)
#+END_SRC
** Web development
*** Web Mode
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :mode ("\\.html\\'" "\\.css\\'" "\\.js\\'" "\\.jsx\\'")
    )
#+END_SRC

*** Emmet mode
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
  :ensure t
  :hook ((html-mode css-mode) . emmet-mode))
#+END_SRC

*** JS2 mode
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
   :ensure t
   :mode "\\.js\\'"
   :hook (js2-mode . js2-minor-mode))
#+END_SRC
* Functions
** Reload Config function
#+BEGIN_SRC emacs-lisp
  (defun reload-config ()
    (interactive)
    (load-file (expand-file-name "~/.config/emacs/init.el")))
#+END_SRC
** Tangle when this file is saved
#+BEGIN_SRC emacs-lisp
  (defun owl/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.config/emacs/config.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle)))
    )
  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'owl/org-babel-tangle-config)))
#+END_SRC
** Org Mode functions!
*** Replace Org Mode Metadata with Icons visually
#+BEGIN_SRC emacs-lisp
  (defun org-mode-prettify-symbols ()
    "Enable prettify symbols for Org mode."
    (setq prettify-symbols-alist
          (append prettify-symbols-alist
  	              '(("#+BEGIN_SRC" . 955)
                    ("+begin_src" . 955)
                    ("+end_src" . 955)
  	                ("#+END_SRC" . 955)
                    ("#+RESULTS:" . ""))
                  ))
    (prettify-symbols-mode 1))
  (add-hook 'org-mode-hook 'org-mode-prettify-symbols)
#+END_SRC
*** Insert Source Block
**** Blank Source Block
#+BEGIN_SRC emacs-lisp
  (defun enter-new-blank-org-source ()
  (interactive)
  (insert "#+BEGIN_SRC \n\n#+END_SRC")
  (forward-line -1))
#+END_SRC
**** Elisp Source Block
#+BEGIN_SRC emacs-lisp
  (defun enter-new-elisp-org-source ()
  (interactive)
  (insert "#+BEGIN_SRC emacs-lisp\n\n#+END_SRC")
  (forward-line -1))
#+END_SRC
**** C source block
#+BEGIN_SRC emacs-lisp
  (defun enter-new-c-org-source ()
  (interactive)
  (insert "#+BEGIN_SRC C :results output :includes\n\n#+END_SRC")
  (forward-line -1))
#+END_SRC
*** Open the Zettlekasten
#+BEGIN_SRC emacs-lisp
  (defun open-org-roam-graph ()
    (interactive)
    (org-roam-ui-mode -1)
    (org-roam-ui-mode 1)  
    (browse-url "http://127.0.0.1:35901")) 
#+END_SRC
** Compile
#+BEGIN_SRC emacs-lisp
  (defun owl/compilation-exit (buffer status)
  "Only show the compilation buffer if there were errors."
  (if (string-match "finished" status)
      (kill-buffer buffer)  ;; Hide the buffer if compilation succeeds
    ))
#+END_SRC
* Keybinds
** For reloading config
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c e r") 'reload-config)
#+END_SRC
** Insert Source Blocks
*** Blank Org Source
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c i s b") 'enter-new-blank-org-source)
#+END_SRC
*** Emacs Lisp Org Source
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c i s e") 'enter-new-elisp-org-source)
#+END_SRC
*** C Org Source
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c i s c") 'enter-new-c-org-source)
#+END_SRC
** Goto what?
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "s-<0x10081247>") 'goto-line)
#+END_SRC
** Copy, Paste, Cut
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-S-c") 'copy-region-as-kill)
  (global-set-key (kbd "C-S-v") 'yank)
  (global-set-key (kbd "C-S-x") 'kill-region)
#+END_SRC
** Undo the redo
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-z") 'undo-only)
  (global-set-key (kbd "C-S-z") 'undo-redo)
#+END_SRC
** Org Roam Binds
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c n i") #'org-roam-node-insert)
  (global-set-key (kbd "C-c n f") #'org-roam-node-find)
  (global-set-key (kbd "C-c n c") #'completion-at-point)
  (global-set-key (kbd "C-c n g") 'open-org-roam-graph)
#+END_SRC

* Appearance
** Font Configuration
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :font "Iosevka Nerd Font" :height 160)
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp
  (load-theme 'doom-nord t)
#+END_SRC
** Eshell Config
#+BEGIN_SRC emacs-lisp
  (setq eshell-banner-message "")
  (setq eshell-prompt-function
      (lambda ()
        (concat
         (propertize (eshell/pwd) 'face 'font-lock-keyword-face)
         (if (= (user-uid) 0)
             (propertize " # " 'face 'font-lock-warning-face)
           (propertize " λ " 'face 'font-lock-variable-name-face)))))
  (add-hook 'eshell-mode-hook 'company-mode)
#+END_SRC
** Mood Line Config
#+BEGIN_SRC emacs-lisp
  (setq mood-line-glyph-alist mood-line-glyphs-fira-code)

  (custom-set-faces
   '(mode-line ((t (:height 1.1))))
   '(mode-line-inactive ((t (:height 1.1)))))

#+END_SRC
* IDE
** Compile
#+BEGIN_SRC emacs-lisp
(add-hook 'compilation-start-hook #'owl/compilation-exit)
(setq compilation-scroll-output 'first-error) ;; Auto-scroll to first error
(setq compilation-auto-jump-to-first-error t) ;; Jump to first error if any
#+END_SRC

* Org Mode
** Basic Config
#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented t       
        org-hide-emphasis-markers t 
        org-hide-leading-stars t
        org-ellipsis " ")
  (custom-set-faces
   '(org-level-1 ((t (:height 1.3 :weight bold))))
   '(org-level-2 ((t (:height 1.2 :weight bold))))
   '(org-level-3 ((t (:height 1.1 :weight bold))))
   '(org-level-4 ((t (:height 1.1 :weight bold))))
   '(org-level-5 ((t (:height 1.1 :weight bold))))
   '(org-level-6 ((t (:height 1.1 :weight bold))))
   '(org-level-7 ((t (:height 1.1 :weight bold))))
   '(org-document-title ((t (:height 1.5 :weight bold))))
   '(org-document-info ((t (:height 1.3 :weight bold :slant italic))))
   '(org-meta-line ((t (:slant italic))))
   '(org-block-begin-line ((t (:slant italic)))))
#+END_SRC
** Org agenda
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files '("~/Documents/Org/agenda.org" "~/Documents/Org/projects.org"))
#+END_SRC
** LaTeX support in Org Mode
#+BEGIN_SRC emacs-lisp
  (setq org-startup-with-latex-preview t)

  (setq org-latex-default-packages-alist
        '(("AUTO" "inputenc" t ("pdflatex"))
          ("T1" "fontenc" t ("pdflatex"))
          ("11pt" "article" nil ("pdflatex"))))
  (setq org-export-with-LaTeX 't)  
  (setq org-latex-listings 't) 
  (setq org-latex-pdf-process '("latexmk -pdf -shell-escape %f"))
  (setq org-preview-latex-default-process 'dvisvgm)

  (setq org-format-latex-options
      '(:foreground default :background default :scale 0.8 :html-foreground "Black"
        :html-background "Transparent" :html-scale 1.0 :matchers ("begin" "$1" "$" "$$" "\\(" "\\[")))

#+END_SRC
** Org Roam
*** Basic Config
#+BEGIN_SRC emacs-lisp
  (setq org-roam-directory "~/Documents/Org/Notes/")
  (setq org-roam-db-update-on-save t)
  (setq org-roam-completion-everywhere t)
  (org-roam-db-autosync-mode)
#+END_SRC
*** Org Roam UI
#+BEGIN_SRC emacs-lisp
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start nil)
#+END_SRC
** Add Org Babel Code Execution
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
  'org-babel-load-languages
  '((C . t)))
#+END_SRC
